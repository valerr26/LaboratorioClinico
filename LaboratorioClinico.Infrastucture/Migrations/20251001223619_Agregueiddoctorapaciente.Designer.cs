// <auto-generated />
using System;
using LaboratorioClinico.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaboratorioClinico.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20251001223619_Agregueiddoctorapaciente")]
    partial class Agregueiddoctorapaciente
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idcita");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fechahora");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("iddoctor");

                    b.Property<int>("IdExamen")
                        .HasColumnType("int")
                        .HasColumnName("idexamen");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("idpaciente");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("motivo");

                    b.Property<string>("NotasConsulta")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("notasconsulta");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdExamen");

                    b.HasIndex("IdPaciente");

                    b.ToTable("t_cita", (string)null);
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("iddoctor");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellido");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("especialidad");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idusuario");

                    b.Property<string>("LicenciaMedica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("licenciamedica");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("t_doctor", (string)null);
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Examen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idexamen");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha");

                    b.Property<int>("IdCita")
                        .HasColumnType("int")
                        .HasColumnName("idcita");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("idpaciente");

                    b.Property<string>("TipoExamen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tipoexamen");

                    b.HasKey("Id");

                    b.HasIndex("IdCita");

                    b.HasIndex("IdPaciente");

                    b.ToTable("t_examen", (string)null);
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idpaciente");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellido");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fechanacimiento");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("iddoctor");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idusuario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("t_paciente", (string)null);
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Resultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idresultado");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("detalle");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fechaemision");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("iddoctor");

                    b.Property<int>("IdExamen")
                        .HasColumnType("int")
                        .HasColumnName("idexamen");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdExamen");

                    b.ToTable("t_resultado", (string)null);
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idrol");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("t_rol", (string)null);
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idusuario");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("idrol");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.ToTable("t_usuario", (string)null);
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Cita", b =>
                {
                    b.HasOne("LaboratorioClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Citas")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaboratorioClinico.Domain.Entities.Examen", "Examen")
                        .WithMany()
                        .HasForeignKey("IdExamen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaboratorioClinico.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Examen");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("LaboratorioClinico.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Examen", b =>
                {
                    b.HasOne("LaboratorioClinico.Domain.Entities.Cita", "Cita")
                        .WithMany("Examenes")
                        .HasForeignKey("IdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaboratorioClinico.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Examenes")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("LaboratorioClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaboratorioClinico.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Resultado", b =>
                {
                    b.HasOne("LaboratorioClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaboratorioClinico.Domain.Entities.Examen", "Examen")
                        .WithMany()
                        .HasForeignKey("IdExamen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Examen");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("LaboratorioClinico.Domain.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Cita", b =>
                {
                    b.Navigation("Examenes");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Examenes");
                });

            modelBuilder.Entity("LaboratorioClinico.Domain.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
